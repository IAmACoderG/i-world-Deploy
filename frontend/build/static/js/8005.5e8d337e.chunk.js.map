{"version":3,"file":"static/js/8005.5e8d337e.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-image/browser/Utils.js","../node_modules/@tsparticles/shape-image/browser/index.js"],"sourcesContent":["import { errorPrefix, getLogger, getStyleFromHsl } from \"@tsparticles/engine\";\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(stringStart, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener(\"error\", () => void errorHandler());\n        img.src = url;\n    });\n}\n","import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                const { loadGifImage } = await import(\"./GifUtils/Utils.js\");\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const { ImagePreloaderPlugin } = await import(\"./ImagePreloader.js\"), { ImageDrawer } = await import(\"./ImageDrawer.js\");\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n"],"names":["currentColorRegex","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","getLogger","errorPrefix","source","src","downloadSvgImage","type","fetch","response","ok","text","svgData","replaceImageColor","imageData","color","particle","svgColoredData","imageShape","opacity","colorStyle","getStyleFromHsl","includes","replace","preFillIndex","indexOf","substring","replaceColorSvg","value","imageRes","gif","data","loaded","ratio","width","height","replaceColor","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","errorHandler","img2","addLoadImageToEngine","engine","name","Error","images","find","t","length","push","loadGifImage","imageFunc","loadImageShape","refresh","ImagePreloaderPlugin","ImageDrawer","preloader","addPlugin","addShape"],"sourceRoot":""}