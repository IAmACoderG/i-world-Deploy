{"version":3,"file":"static/js/5166.cdc611cd.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js","../node_modules/@tsparticles/shape-emoji/browser/Utils.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    draw(data) {\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n    }\n}\n","export function drawEmoji(data) {\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\n    if (!emojiData) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n"],"names":["defaultFont","EmojiDrawer","this","_emojiShapeDict","Map","key","emojiData","ImageBitmap","close","delete","data","context","particle","radius","opacity","diameter","previousAlpha","globalAlpha","drawImage","drawEmoji","container","options","actualOptions","validTypes","t","isInArray","particles","shape","type","promises","loadFont","shapeOptions","find","executeOnSingleOrMultiple","font","push","Promise","all","shapeData","value","emoji","itemFromSingleOrMultiple","randomIndexData","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set"],"sourceRoot":""}