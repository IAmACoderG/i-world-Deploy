{"version":3,"file":"static/js/5361.ef736a0e.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-connect/browser/Utils.js","../node_modules/@tsparticles/interaction-external-connect/browser/Connector.js"],"sourcesContent":["import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["lineStyle","container","ctx","p1","p2","connectOptions","actualOptions","interactivity","modes","connect","context","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","colorMix","grad","createLinearGradient","x","y","addColorStop","getStyleFromHsl","clamp","getStyleFromRgb","gradient","links","drawConnection","canvas","draw","ls","pos1","pos2","width","begin","end","drawLine","lineWidth","strokeStyle","stroke","drawConnectLine","retina","linksWidth","Connector","this","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","events","onHover","enable","status","mousePos","mouse","position","abs","query","particles","quadTree","queryCircle","p","isEnabled","forEach","i","slice","distMax","xDiff","yDiff","particle","isInArray","mode","options","Connect","sources","source","load","ExternalInteractorBase"],"sourceRoot":""}