{"version":3,"file":"static/js/7985.a0efb83c.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js","../node_modules/@tsparticles/interaction-particles-links/browser/Linker.js"],"sourcesContent":["import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["CircleWarp","x","y","radius","canvasSize","point","this","width","height","range","rect","circle","newPos","position","undefined","biggerCircle","Circle","size","rectSW","Rectangle","origin","Linker","container","_setColor","p1","options","links","linkContainer","linksOptions","linkColor","id","particles","linksColor","linksColors","get","optColor","color","getLinkRandomColor","blink","consent","set","Map","pos1","getPosition","canvas","linkOpt1","optOpacity","opacity","optDistance","retina","linksDistance","warp","query","quadTree","p2","linkOpt2","enable","spawning","destroyed","some","t","destination","pos2","distance","getDistances","dx","dy","absDiffs","Math","abs","warpDistances","min","sqrt","getLinkDistance","opacityLine","push","particle","Links","sources","source","load","ParticlesInteractorBase"],"sourceRoot":""}