{"version":3,"file":"static/js/7777.5779fbd1.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-grab/browser/Utils.js","../node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js"],"sourcesContent":["import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["drawGrab","container","particle","lineColor","opacity","mousePos","canvas","draw","ctx","beginPos","getPosition","context","width","begin","end","colorLine","drawLine","strokeStyle","getStyleFromRgb","lineWidth","stroke","drawGrabLine","retina","linksWidth","Grabber","this","grab","actualOptions","interactivity","modes","grabModeDistance","distance","pixelRatio","events","onHover","enable","status","mouseMoveEvent","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","pos","pointDistance","getDistance","grabLineOptions","links","lineOpacity","opacityLine","optColor","color","options","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","getLinkColor","undefined","isInArray","mode","Grab","sources","source","load","ExternalInteractorBase"],"sourceRoot":""}